/*
üìå Tabla PRO: Destructuraci√≥n en JavaScript

| üè∑Ô∏è                                   | ¬øQu√© hace?                                  | Sintaxis                             | Ejemplo b√°sico                         | Resultado                     |
| ------------------------------------- | ------------------------------------------- | ------------------------------------ | -------------------------------------- | ----------------------------- |
| **1Ô∏è‚É£ Destructuraci√≥n de Arrays**     | Extrae valores por posici√≥n.                | `const [a, b] = array`               | `const [x, y] = [10, 20]`              | `x = 10`, `y = 20`            |
| **2Ô∏è‚É£ Destructuraci√≥n de Objetos**    | Extrae propiedades por nombre.              | `const {prop} = obj`                 | `const {nombre} = user`                | `nombre = "Ana"`              |
| **3Ô∏è‚É£ Renombrar variables**           | Cambia nombre de la variable que extraes.   | `const {prop: alias} = obj`          | `const {nombre: nombreUsuario} = user` | `nombreUsuario = "Ana"`       |
| **4Ô∏è‚É£ Valores por defecto**           | Asigna valor si la propiedad no existe.     | `const {prop = valor} = obj`         | `const {edad = 18} = user`             | `edad = 18` si `edad` no est√° |
| **5Ô∏è‚É£ Destructuraci√≥n en par√°metros** | Extrae directo en la definici√≥n de funci√≥n. | `function saluda({nombre}) {}`       | `saluda({ nombre: "Ana" })`            | Usa `nombre` directo          |
| **6Ô∏è‚É£ Destructuraci√≥n anidada**       | Extrae de objetos/arrays dentro de otros.   | `const {direcci√≥n: {ciudad}} = user` | `{ direccion: { ciudad: "Bogot√°" } }`  | `ciudad = "Bogot√°"`           |

*/
// ‚úÖ Datos base
// Arrays
const numeros = [10, 20, 30, 40];

const coordenadas = [5, 15, 25];

// Objeto simple
const usuario = {
    nombre: "Luis",
    edad: 25,
    direccion: {
        ciudad: "Bogot√°",
        pais: "Colombia"
    }
};

// Objeto API simulado
const respuesta = {
    status: "success",
    data: {
        id: 1,
        email: "luis@example.com",
        rol: "admin"
    }
};

// üîπ Mini-retos
// ----------------------------------------------------------------------
// ü•á 1Ô∏è‚É£ Destructuraci√≥n de arrays
// Extrae el primer y tercer n√∫mero de numeros y gu√°rdalos en primero y tercero.

// üóùÔ∏è ¬øC√≥mo funciona la destructuraci√≥n de arrays?
// üëâ La sintaxis es:
// const [primerElemento, segundoElemento, ...] = array;

// üîë Paso a paso mental
// const [ ] = numeros; ‚Üí abres corchetes para asignar por posici√≥n.
// Pones variables en el orden: [primero, , tercero]
// primero toma 10 (posici√≥n 0)
// saltas 20 (posici√≥n 1)
// tercero toma 30 (posici√≥n 2)

const [a, , c] = numeros;
console.log(a)
console.log(c)

// ----------------------------------------------------------------------
// ü•à 2Ô∏è‚É£ Destructuraci√≥n de objetos
// Extrae nombre y edad de usuario.
const { nombre, edad } = usuario

console.log(nombre);
console.log(edad)
// ----------------------------------------------------------------------

// ü•â 3Ô∏è‚É£ Renombrar + valor por defecto
// Extrae pais de usuario.direccion y ren√≥mbralo como paisUsuario.
// Adem√°s extrae telefono y ponle valor por defecto 000-000.

const { pais: paisUsuario } = usuario.direccion
const { telefono = 5566 } = usuario.direccion
console.log(paisUsuario);
console.log(telefono)
// ----------------------------------------------------------------------

// üèÖ 4Ô∏è‚É£ Destructuraci√≥n en par√°metros
// Crea una funci√≥n mostrarEmail que reciba { data } de respuesta y muestre data.email.

function mostrarEmail({ data }) {
    console.log(data.email)
}
mostrarEmail(respuesta)