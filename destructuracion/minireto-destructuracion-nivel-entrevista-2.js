console.clear()

/*
üíº Reto de entrevista 2: ‚ÄúInventario de Productos‚Äù
üß† Objetivo:
Practicar la desestructuraci√≥n de objetos y arrays en el par√°metro de la funci√≥n, con valores por defecto, sin acceder directamente a propiedades dentro del cuerpo de la funci√≥n.

üßæ Enunciado:
Tienes una funci√≥n llamada mostrarInventario que recibe como argumento un objeto con la siguiente estructura:
*/
const respuestaAPI = {
    data: {
        productos: [
            {
                nombre: "Laptop",
                precio: 1500,
                detalles: {
                    stock: 10,
                    categoria: "Tecnolog√≠a"
                }
            },
            {
                nombre: "Silla",
                detalles: {
                    categoria: "Muebles"
                }
            },
            // ...otros productos
        ]
    }
};

// Pero a veces el objeto puede llegar incompleto o vac√≠o, y necesitas evitar errores usando valores por defecto.

/*
‚úÖ Tu tarea:
1- Define la funci√≥n mostrarInventario con desestructuraci√≥n profunda directamente en el par√°metro de la funci√≥n.

2- Extrae de cada producto:

nombre ‚Üí default: "Sin nombre"
precio ‚Üí default: 0
stock ‚Üí default: 0
categoria ‚Üí default: "Sin categor√≠a"

3- Imprime una l√≠nea por cada producto con este formato:
Producto: Laptop, Precio: $1500, Stock: 10, Categor√≠a: Tecnolog√≠a

üîí Restricciones:

‚ùå No accedas con objeto.propiedad dentro del cuerpo de la funci√≥n.
‚úÖ Usa solo desestructuraci√≥n en el par√°metro de la funci√≥n y dentro del .map() si lo usas.
‚úÖ Usa valores por defecto correctamente para evitar errores si falta alg√∫n campo.
*/

function mostrarInventario({ data: { productos = [] } = {} }) {
    productos.forEach(({
        nombre = "Sin nombre",
        precio = 0,
        stock = 0,
        categoria = "Sin categoria"
    }) => {
        console.log(`Producto: ${nombre}, Precio: ${precio}, Stock: ${stock}, Categor√≠a: ${categoria}`)
    });
}

mostrarInventario(respuestaAPI)