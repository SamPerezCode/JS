// üöÄ Ejercicios nivel pro: Funciones Flecha, this y Scope
// ‚úÖ 1Ô∏è‚É£ Herencia de this en callbacks
// js
// Copiar
// Editar

// -------------------------------------------------------------------
// 1Ô∏è‚É£ Crea un objeto `usuario` con:
// nombre: "Ana"
// m√©todo `presentarse` (funci√≥n normal) que dentro haga un `setTimeout` de 1 seg
// Dentro del `setTimeout`, usa una flecha para imprimir: "Hola, soy Ana"

const usuario = {
    nombre: "Ana",
    presentarse() {
        setTimeout(() => {
            console.log(`Hola, soy ${this.nombre}`);
        }, 1000);
    },
    saludar: function () {
        console.log(`Hola soy ${this.nombre}`)
    }
};

usuario.presentarse();
usuario.saludar();


// -------------------------------------------------------------------
// ‚úÖ 2Ô∏è‚É£ Error com√∫n usando flecha en m√©todo
/*
// 2Ô∏è‚É£ Corrige este error:
// ¬øQu√© imprime y por qu√©?
const persona = {
    nombre: "Carlos",
    saludar: () => {
        console.log(`Hola, soy ${this.nombre}`);
    }
};

persona.saludar();

Analiza: ¬øQu√© es this aqu√≠?

Reescr√≠belo correctamente.

*/

const persona2 = {
    nombre: "Carlos",
    saludar() {
        setTimeout(() => {
            console.log(`Hola, soy ${this.nombre} `)
        })
    }
}
persona2.saludar();

// -------------------------------------------------------------------
// ‚úÖ 3Ô∏è‚É£ Callback con flecha en Array
// 3Ô∏è‚É£ Dado un array:
const numeros = [1, 2, 3, 4];

// Usa map con flecha para duplicar cada n√∫mero
// Resultado: [2, 4, 6, 8]

// const duplicados = numeros.map(num => num * 2);
// console.log(duplicados);

const duplicados = () => {
    return numeros.map(num => num * 2)
}

console.log(duplicados())

// Otra forma s que sea la flecha sin bloque {}, osea directamente:

// const duplicados = () => numeros.map(num => num * 2);


// -------------------------------------------------------------------
// 5Ô∏è‚É£ ¬øQu√© imprime y por qu√©?
// var nombre = "Global"; SI es var no seria undefine window.nombre existe
let nombre = "Global"; // undefined, window.nombre no existe

const obj = {
    nombre: "Objeto",
    mostrar: () => {
        console.log(this.nombre);
    }

    // mostrar() {
    //     setTimeout(() => {
    //         console.log(this.nombre)
    //     })
    // }
};

obj.mostrar();

// -------------------------------------------------------------------
// üóÇÔ∏è Reto Combinado
// üèÜ Desaf√≠o final: Combina flecha + callbacks + this

const tarea = {
    descripcion: "Hacer ejercicios",
    mostrar() {
        console.log(`Descripci√≥n: ${this.descripcion}`);
        setTimeout(() => {
            console.log(`Recordatorio: ${this.descripcion}`);
        }, 500);
    }
};

tarea.mostrar();

// ‚úÖ 2Ô∏è‚É£ Tu mini reto combinado:
// ‚úîÔ∏è Analizar cada snippet: ¬øD√≥nde la flecha hereda this de forma correcta y d√≥nde no?
// ‚úîÔ∏è Detectar: ¬øCu√°ndo usar flecha o cu√°ndo es mejor una funci√≥n normal?
// ‚úîÔ∏è Corregir: Si ves undefined inesperado, cambia la estructura.

// // M√©todo: funci√≥n regular
// mostrar() {
//   console.log(this.nombre); // ‚úÖ this = objeto
// }

// // Callback dentro del m√©todo: flecha
// mostrar() {
//   setTimeout(() => {
//     console.log(this.nombre); // ‚úÖ hereda this del m√©todo
//   }, 1000);
// }

// ‚ö° Conclusi√≥n clara:
/*
| D√ìNDE                                       | QU√â USAR        | POR QU√â                               |
| ------------------------------------------- | --------------- | ------------------------------------- |
| M√©todo de objeto                            | Funci√≥n normal  | Para que `this` apunte al objeto      |
| Callback interno (setTimeout, map, forEach) | Flecha          | Para heredar `this` del m√©todo        |
| Fuera de un objeto                          | Flecha o normal | Depende si quieres `this` global o no |

‚úÖ Tu s√≠ntesis es de nivel Pro:
‚ÄúSi necesito this del objeto, no uso flecha para declarar m√©todos.‚Äù ‚Üí CORRECTO.
‚ÄúDentro de callbacks as√≠ncronos s√≠ puedo usar flecha para no perder this.‚Äù ‚Üí CORRECTO.
‚ÄúSi no necesito un callback, la flecha dentro de un m√©todo es innecesaria.‚Äù ‚Üí CORRECTO.


*/

