/*
üî• Reto: Calculadora de totales con callbacks
‚úÖ Contexto
Tienes un array de compras con montos individuales.
Dependiendo de un callback, puedes:

--Sumar todo.
--Restar devoluciones.
--Multiplicar cada monto por un impuesto.
*/
// üõí Datos base
const compras = [100, 200, 150, 50];
// ---------------------------------------------------------------------------
// üéØ Tareas
// 1Ô∏è‚É£ Declara tres funciones callback:
// sumarMontos ‚Üí suma todos los montos
// restarDevoluciones ‚Üí resta 50 a cada monto y suma el total
// aplicarImpuesto ‚Üí multiplica cada monto por 1.19 y suma el total

function sumarMontos(array) {
    return array.reduce((acc, monto) => acc + monto, 0);
}

function restarDevoluciones(array) {
    const conDevolucion = array.map(monto => monto - 50);
    return conDevolucion.reduce((acc, monto) => acc + monto, 0);
}

function aplicarImpuesto(array) {
    const conImpuesto = array.map(monto => monto * 1.19);
    return conImpuesto.reduce((acc, monto) => acc + monto, 0);
}


// ---------------------------------------------------------------------------
// 2Ô∏è‚É£ Crea la funci√≥n calcularTotal
// Recibe un array y una funci√≥n callback.
// Retorna el resultado de aplicar el callback al array.

function calcularTotal(montos, callback) {
    return callback(montos)
}

// ---------------------------------------------------------------------------
// 3Ô∏è‚É£ Ejecuta calcularTotal con cada funci√≥n y muestra los resultados en consola.

console.log(calcularTotal(compras, sumarMontos));
console.log(calcularTotal(compras, aplicarImpuesto));
console.log(calcularTotal(compras, restarDevoluciones))
// üí° Tips
// Dentro de cada callback usar√°s .reduce() para sumar.
// Puedes usar .map() dentro de aplicarImpuesto si quieres.


// üìå Tips para entenderlo mejor:
// 1Ô∏è‚É£ calcularTotal es gen√©rica: no hace nada por s√≠ sola, solo llama lo que le pases.
// 2Ô∏è‚É£ El poder est√° en los callbacks: cada uno implementa una l√≥gica distinta (reduce, multiplicaci√≥n, resta‚Ä¶).
// 3Ô∏è‚É£ En la vida real esto se usa para: aplicar descuentos, impuestos, validaciones‚Ä¶ y despu√©s React se apoya mucho en este patr√≥n (pasar funciones).