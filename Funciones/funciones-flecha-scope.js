// üóÇÔ∏è üîë 1. Funciones flecha avanzadas
// ‚ö° ¬øQu√© debes recordar?
/*
| Punto       | Flecha `(=>)`               | Funci√≥n normal                    |
| ----------- | --------------------------- | --------------------------------- |
| `this`      | No tiene su propio `this`   | S√≠ tiene su propio `this`         |
| `arguments` | No tiene `arguments`        | S√≠ tiene `arguments`              |
| Uso ideal   | Callbacks, funciones cortas | M√©todos de objetos, constructores |
*/

// üìù Mini ejemplo
const persona = {
    nombre: "Ana",
    saludar: function () {
        console.log(`Hola, soy ${this.nombre}`);
    },
    saludarFlecha: () => {
        console.log(`Hola, soy ${this.nombre}`);
    }
    //  En objetos: this apunta al objeto que llama al m√©todo. por eso ac√° nombre seria undefine
};

persona.saludar(); // ‚úÖ Hola, soy Ana
persona.saludarFlecha(); // ‚ùå Hola, soy undefined
// ‚û°Ô∏è La flecha hereda this del contexto superior, por eso no reconoce this.nombre dentro de persona.

// üß≠ üîë 2. "this" en profundidad
// -- Global: En modo no estricto, this apunta a window en el navegador.
// -- En objetos: this apunta al objeto que llama al m√©todo.
// -- Flechas: No crean this propio ‚Üí heredan el de fuera.
// -- En clases y React: Muy importante para manejar props y m√©todos.

// üìå Por qu√© this.nombre es undefined
// üëâ Las funciones flecha (=>) NO tienen su propio this.
// En lugar de eso, heredan this del contexto exterior donde fueron definidas.

// En un objeto literal, si usas flecha as√≠:
const persona2 = {
    nombre: "Luis",
    saludarFlecha: () => {
        console.log(`Hola, soy ${this.nombre}`);
    }
};
// ‚úÖ Aqu√≠ this NO apunta al objeto persona, sino al this del √°mbito global (o m√≥dulo si usas ES Modules).
// Por eso:
// this.nombre // => undefined

// -------------------------------------
// ‚úÖ C√≥mo solucionarlo
// üö´ NO uses flechas para m√©todos de objeto que necesiten this.
// üëâ Usa funci√≥n normal:
const persona3 = {
    nombre: "Luis",
    saludar() {
        console.log(`Hola, soy ${this.nombre}`);
    }
};
// üìå Aqu√≠:
// this dentro de saludar apunta a persona.

// ‚ö° ¬øCu√°ndo usar flecha entonces?
// ‚úÖ Bien para callbacks donde no quieres un this propio.

// ‚ùå Mal para m√©todos que necesitan this del objeto.

// ‚úÖ Tip: Si quieres usar flecha PERO conservar this
// üëâ Hazlo dentro de una funci√≥n normal:

// const persona4 = {
//     nombre: "Luis",
//     saludar() {
//         setTimeout(() => {
//             console.log(`Hola, soy ${this.nombre}`);
//         }, 1000);
//     }
// };
// persona4.saludar(); // ‚úÖ Hola, soy Luis


// üéØ üîë 3. Scope y closures
// Scope: Es el contexto donde tus variables viven.

// var ‚Üí function scope
// let y const ‚Üí block scope

// Closure: Es cuando una funci√≥n ‚Äúrecuerda‚Äù su contexto externo.
function crearContador() {
    let cuenta = 0;
    return function () {
        cuenta++;
        return cuenta;
    }
}

const contador = crearContador();
console.log(contador()); // 1
console.log(contador()); // 2

// ‚úÖ 1Ô∏è‚É£ ¬øQu√© significa snippet?
// Un snippet es simplemente un fragmento corto de c√≥digo, como un mini-ejemplo aislado.
// Lo usas para practicar o ilustrar un concepto espec√≠fico (en este caso, this + flechas).

// Ejemplo:
const obj = {
    nombre: "Ana",
    mostrar: () => console.log(this.nombre)
};
// Esto es un snippet: un bloque peque√±o que puedes ejecutar para ver c√≥mo se comporta this.

