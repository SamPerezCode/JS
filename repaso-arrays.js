/*
‚úÖ Plan de repaso: ARRAYS ‚Äî Nivel PRO
üìå 1Ô∏è‚É£ M√©todos b√°sicos de mutaci√≥n
Estos cambian el array original.

| M√©todo      | Qu√© hace           | Ejemplo               |
| ----------- | ------------------ | --------------------- |
| `push()`    | Agrega al final    | `arr.push("uva")`     |
| `pop()`     | Elimina el √∫ltimo  | `arr.pop()`           |
| `shift()`   | Elimina el primero | `arr.shift()`         |
| `unshift()` | Agrega al inicio   | `arr.unshift("kiwi")` |

*/

const frutas = ["manzana", "pera"];
// 1. Agrega "uva" al final
// 2. Elimina el primero
// 3. Agrega "kiwi" al inicio
// 4. Elimina el √∫ltimo
frutas.push("uva");
frutas.shift();
frutas.unshift("kiwi");
frutas.pop();

console.log(frutas)

/*
üìå 2Ô∏è‚É£ M√©todos de transformaci√≥n
No modifican el original (devuelven nuevo array).
| M√©todo       | Qu√© hace                                   | Ejemplo                               |
| ------------ | ------------------------------------------ | ------------------------------------- |
| `map()`      | Transforma cada elemento                   | `arr.map(x => x.toUpperCase())`       |
| `filter()`   | Filtra seg√∫n condici√≥n                     | `arr.filter(x => x !== "pera")`       |
| `find()`     | Busca el **primero** que cumpla            | `arr.find(x => x.includes("a"))`      |
| `reduce()`   | Reduce todos los elementos a un solo valor | `arr.reduce((acc, val) => acc + val)` |
| `includes()` | Verifica si existe un elemento exacto      | `arr.includes("pera")`                |
| `some()`     | Devuelve `true` si **alguno** cumple       | `arr.some(x => x.length > 5)`         |
| `every()`    | Devuelve `true` si **todos** cumplen       | `arr.every(x => x.length > 1)`        |
*/

const numeros = [1, 2, 3, 4, 5];
// 1. Crea un nuevo array multiplicando cada n√∫mero por 2 (usa map)
// 2. Filtra los n√∫meros mayores o iguales a 5 (usa filter)
// 3. Busca el primer n√∫mero mayor a 4 (usa find)
// 4. Suma todos los n√∫meros usando reduce
// 5. Verifica si incluye el n√∫mero 3 (includes)
// 6. Verifica si alguno es mayor a 4 (some)
// 7. Verifica si todos son mayores a 0 (every)

const numPor2 = numeros.map(num => num * 2);
console.log(numPor2);

const numMayores = numPor2.filter(num => num >= 5);
console.log(numMayores);

const numMayorA4 = numeros.find(num => num > 4);
console.log(numMayorA4);

const sumaNum = numeros.reduce((acomulado, num) => {
    return acomulado + num
}, 0);
console.log(sumaNum);

console.log(numeros.includes(3));

const mayorA4 = numeros.some(numero => numero > 4);
console.log(mayorA4);

const mayorA0 = numeros.every(num => num > 0);
console.log(mayorA0);


/*
üß© ¬øQu√© es un callback?
Un callback es una funci√≥n que se pasa como argumento a otra funci√≥n
para que esa funci√≥n la ejecute cuando sea necesario.

‚û°Ô∏è En otras palabras:

‚ÄúToma esta funci√≥n y ejec√∫tala dentro de tu proceso.‚Äù
-----------------------------------------------------------------
// Esta es la funci√≥n callback:
const decirHola = () => {
  console.log("¬°Hola!");
};

// Esta es una funci√≥n que recibe una callback:
function procesarSaludo(callback) {
  console.log("Voy a saludar...");
  callback(); // aqu√≠ se ejecuta
}

procesarSaludo(decirHola);
// Output:
// Voy a saludar...
// ¬°Hola!
-----------------------------------------------------------------
‚ö° ¬øD√≥nde aparecen los callbacks en arrays?
M√©todos como forEach, map, filter, find, reduce, some, every
usan callbacks: les pasas una funci√≥n que se ejecuta para cada elemento del array.

üü¢ Ejemplo real:
const numeros = [1, 2, 3];

numeros.forEach(num => {
  console.log(num * 2); // ‚Üê esto es la callback
});

// Output: 2, 4, 6
Aqu√≠:

--forEach recorre numeros.
--Para cada num, ejecuta la funci√≥n flecha: (num) => { ... }
--Esa funci√≥n es tu callback.

-----------------------------------------------------------------
üîë Clave mental
Un callback:
‚úÖ Es una funci√≥n que se pasa como par√°metro.
‚úÖ Se invoca dentro de la funci√≥n receptora.
‚úÖ Te da control: decides qu√© hacer por cada elemento.
-----------------------------------------------------------------
üìå Por eso map y forEach usan callbacks
forEach: recorre y ejecuta la callback por cada item (pero no devuelve nada).

map: recorre, ejecuta la callback y arma un nuevo array con los resultados.
-----------------------------------------------------------------

üìå 3Ô∏è‚É£ Recorrer un array
--for
--forEach
--map

üëâ Todos sirven para recorrer, pero:

--forEach y map usan callbacks.
--map devuelve un nuevo array, forEach no.
*/
const nombres = ["Ana", "Luis", "Pedro"];
// 1. Recorre con for y muestra cada nombre
// 2. Recorre con forEach e imprime: "Hola, Ana" ...
// 3. Usa map para crear un nuevo array con nombres en may√∫sculas

for (let i = 0; i < nombres.length; i++) {
    console.log(`${nombres[i]}`)
}

nombres.forEach(nombre => {
    console.log(`Hola, ${nombre}`)
});

const nombresMayus = nombres.map(nombre => nombre.toUpperCase())
console.log(nombresMayus)


// -----------------------------------------------------------------
// üöÄ Desaf√≠o: Lista de alumnos en talleres
const alumnos = [
    { nombre: "Ana", edad: 20, taller: "Oraci√≥n" },
    { nombre: "Luis", edad: 17, taller: "Alabanza" },
    { nombre: "Pedro", edad: 21, taller: "Discipulado" },
    { nombre: "Sara", edad: 19, taller: "Oraci√≥n" },
    { nombre: "Marta", edad: 16, taller: "Alabanza" },
];

const talleres = ["Oraci√≥n", "Alabanza", "Discipulado"];

/*
üéØ Tareas
1Ô∏è‚É£ Recorre todos los alumnos y muestra:
"Ana est√° inscrita en Oraci√≥n y tiene 20 a√±os" para cada uno.

2Ô∏è‚É£ Filtra a los alumnos mayores o iguales a 18 a√±os y crea un nuevo array. Mu√©stralo.

3Ô∏è‚É£ Usa find() para ubicar al alumno llamado "Pedro" y muestra solo su taller.

4Ô∏è‚É£ Usa map() para crear un array de nombres en may√∫sculas de todos los alumnos.

5Ô∏è‚É£ Verifica con some() si hay alumnos menores de 18 a√±os.

6Ô∏è‚É£ Verifica con every() si todos los alumnos est√°n inscritos en un taller v√°lido (usa la lista talleres).

7Ô∏è‚É£ Usa reduce() para sumar la edad total de todos los alumnos.

8Ô∏è‚É£ BONUS: Usa includes() para comprobar si existe el taller "Evangelismo" en la lista talleres.
*/
// 1.
for (let i = 0; i < alumnos.length; i++) {
    console.log(`${alumnos[i].nombre} esta inscrito en ${alumnos[i].taller} y tiene ${alumnos[i].edad} a√±os de edad`)
}
// 2. 
const alumnosMayores = alumnos.filter(alumno => alumno.edad >= 18);
console.log(alumnosMayores)
// 3.
const findPedro = alumnos.find(alumno => alumno.nombre === "Pedro");
console.log(findPedro.taller);

// 4.
const nombresMayusAlumnos = alumnos.map(nom => nom.nombre.toUpperCase());
console.log(nombresMayusAlumnos)

// 5.
const alumnosMayoresDe18 = alumnos.some(alum => alum.edad > 18);
console.log(alumnosMayoresDe18)

// 6. 
// ‚úÖ ¬øQu√© l√≥gica necesitas?
// 1Ô∏è‚É£ Para cada alumno, debes revisar:

// Que su taller est√© incluido en la lista talleres.

// 2Ô∏è‚É£ Para saber si todos cumplen, usas .every():

// Retorna true solo si todos cumplen.

// Retorna false si al menos uno NO cumple.

const todosValidos = alumnos.every(alumno =>
    talleres.includes(alumno.taller)
);
console.log(todosValidos);

// 7.
const edadAlumnos = alumnos.reduce((acc, alumno) => {
    return acc + alumno.edad
}, 0)
console.log(edadAlumnos)

console.log(talleres.includes("Evangelismo"))

// Lista de menores de edad:
const menoresDeEdad = alumnos.filter(alumno => alumno.edad < 18);
console.log(menoresDeEdad)
/*
üöÄ Lo que acabas de demostrar
üî• Manejas:

Recorridos b√°sicos (for)

Callbacks (forEach, map, filter, find, reduce)

M√©todos de verificaci√≥n (some, every, includes)

Combinaci√≥n de arrays con otros arrays (includes con every)

*/