/*
 El siguiente paso l√≥gico (y pedag√≥gico) es capturar el submit del formulario, leer el valor del input y crear la tarea en memoria y en la vista (tabla). Hacemos eso primero; despu√©s a√±adimos borrar, marcar como completada, editar y finalmente localStorage.

Paso 1 ‚Äî Objetivo
--Escuchar el submit del formulario.
--Validar que el input no est√© vac√≠o.
--Crear un objeto task con id, texto y completed: false.
--Guardarlo en un array tasks.
--Renderizar la nueva fila en la tabla (tbody).

Explicaci√≥n breve de las piezas importantes
--formTarea.addEventListener('submit', ...) ‚Äî usamos submit porque es accesible por teclado (Enter) y es buena pr√°ctica con formularios.

--Date.now().toString() da un id √∫nico simple (no importa si queda num√©rico).

--renderTarea usa createElement para que entiendas la API DOM real (m√°s segura que innerHTML).

--tr.dataset.id y btnCompletar.dataset.id nos permiten identificar filas/botones despu√©s, sin depender del texto.

--tasks por ahora est√° en memoria; luego lo guardamos en localStorage.
 */





document.addEventListener('DOMContentLoaded', () => {

    const formTarea = document.getElementById('form-tarea');
    const inputTarea = document.getElementById('input-tarea');
    const tbodyTareas = document.getElementById('tbody-tareas');

    // üîπ Array en memoria (se llenar√° desde localStorage si hay datos)
    let tasks = [];

    // üîπ Guardar en localStorage
    function guardarEnLocalStorage() {
        localStorage.setItem('tasks', JSON.stringify(tasks));
    }

    // üîπ Cargar desde localStorage
    function cargarDesdeLocalStorage() {
        const datos = localStorage.getItem('tasks');
        if (datos) {
            tasks = JSON.parse(datos);
        }
    }

    // üîπ Crear tarea
    const crearTarea = (texto) => ({
        id: Date.now().toString(),
        texto: texto.trim(),
        completed: false
    });

    // üîπ Renderiza una fila
    const renderTarea = (task) => {
        const tr = document.createElement('tr');
        tr.dataset.id = task.id;

        const tdTexto = document.createElement('td');
        tdTexto.textContent = task.texto;
        if (task.completed) tdTexto.classList.add('completada');

        const tdAcciones = document.createElement('td');

        const btnCompletar = document.createElement('button');
        btnCompletar.type = 'button';
        btnCompletar.textContent = task.completed ? 'Desmarcar' : 'Completar';
        btnCompletar.className = 'btn-completar';
        btnCompletar.dataset.id = task.id;

        const btnEliminar = document.createElement('button');
        btnEliminar.type = 'button';
        btnEliminar.textContent = 'Eliminar';
        btnEliminar.className = 'btn-eliminar';
        btnEliminar.dataset.id = task.id;

        tdAcciones.appendChild(btnCompletar);
        tdAcciones.appendChild(document.createTextNode(' '));
        tdAcciones.appendChild(btnEliminar);

        tr.appendChild(tdTexto);
        tr.appendChild(tdAcciones);

        tbodyTareas.appendChild(tr);
    };

    // üîπ Renderizar todo el array
    const renderAll = () => {
        tbodyTareas.innerHTML = '';
        tasks.forEach(renderTarea);
    };

    // üîπ Agregar nueva tarea
    formTarea.addEventListener('submit', (e) => {
        e.preventDefault();
        const texto = inputTarea.value;
        if (!texto.trim()) {
            alert('Agregue una tarea v√°lida');
            return;
        }
        const nueva = crearTarea(texto);
        tasks.push(nueva);
        guardarEnLocalStorage(); // Guardar cambios
        renderTarea(nueva);
        inputTarea.value = '';
        inputTarea.focus();
    });

    // üîπ Manejo de clicks (delegaci√≥n)
    tbodyTareas.addEventListener('click', (e) => {
        const btn = e.target.closest('button');
        if (!btn) return;
        const id = btn.dataset.id;
        if (!id) return;

        if (btn.classList.contains('btn-eliminar')) {
            eliminarTarea(id);
        } else if (btn.classList.contains('btn-completar')) {
            toggleCompletar(id);
        }
    });

    function eliminarTarea(id) {
        tasks = tasks.filter(t => t.id !== id);
        guardarEnLocalStorage();
        renderAll();
    }

    function toggleCompletar(id) {
        const task = tasks.find(t => t.id === id);
        if (!task) return;
        task.completed = !task.completed;
        guardarEnLocalStorage();
        renderAll();
    }

    // üîπ Inicializaci√≥n: cargar y renderizar
    cargarDesdeLocalStorage();
    renderAll();

    window._tasksDebug = tasks; // para inspecci√≥n en consola
});




/*
üìå Pr√≥ximo paso l√≥gico seg√∫n nuestro plan:
Eliminar tarea con delegaci√≥n de eventos.

1Ô∏è‚É£ ¬øQu√© es delegaci√≥n de eventos?
En lugar de agregar un addEventListener a cada bot√≥n de eliminar, le ponemos un solo listener a la tabla (o al <tbody>), y verificamos d√≥nde ocurri√≥ el click.
Esto es m√°s eficiente y no requiere volver a a√±adir listeners cuando agregamos nuevas tareas.

2Ô∏è‚É£ L√≥gica que implementaremos
1. Detectar el click en un bot√≥n Eliminar usando e.target.
2. Confirmar que es realmente el bot√≥n de eliminar (por ejemplo, verificando una clase o texto).
3. Obtener el √≠ndice de la tarea o un id √∫nico.
4. Eliminar la tarea del array tasks.
5. Volver a renderizar la tabla.

Explicaci√≥n corta ‚Äî por qu√© funciona y por qu√© es buena pr√°ctica
--Delegaci√≥n: s√≥lo hay un addEventListener en tbodyTareas. Cuando haces click en cualquier bot√≥n nuevo (incluso creado despu√©s), el listener lo detecta y act√∫a. Evita tener que a√±adir listeners a cada bot√≥n individualmente.

--dataset.id: cada bot√≥n lleva data-id con el id de la tarea; as√≠ se identifica la tarea sin leer texto o posici√≥n.

--renderAll(): simplifica la sincronizaci√≥n DOM ‚Üî array. No es la soluci√≥n m√°s optimizada si tienes miles de filas, pero para un gestor de tareas es clara y evita bugs sutiles.

--Mutaci√≥n del array: uso splice para eliminar por √≠ndice, find para modificar completed. Mantienes tasks en memoria (m√°s tarde lo persistiremos).
*/

/*
Guardar en localStorage
Cada vez que modifiquemos el array tasks (ya sea agregar, eliminar o marcar completada), debemos guardar su estado en localStorage as√≠:

function guardarEnLocalStorage() {
    localStorage.setItem("tasks", JSON.stringify(tasks));
}

üîπ JSON.stringify(tasks) ‚Üí convierte el array en texto JSON porque localStorage solo guarda cadenas.
üîπ "tasks" ‚Üí es la clave donde se guardar√° la informaci√≥n.

Ejemplo de uso al agregar una tarea:

tasks.push(nuevaTarea);
guardarEnLocalStorage();

2Ô∏è‚É£ Leer desde localStorage al cargar la p√°gina
Cuando la p√°gina cargue, debemos revisar si hay datos guardados y, si los hay, recuperarlos:

function cargarDesdeLocalStorage() {
    const tareasGuardadas = localStorage.getItem("tasks");
    if (tareasGuardadas) {
        tasks = JSON.parse(tareasGuardadas); // Convertir de texto a array
    }
}

3Ô∏è‚É£ Integrarlo al flujo
En tu c√≥digo, esto ir√≠a as√≠:
let tasks = [];

function guardarEnLocalStorage() {
    localStorage.setItem("tasks", JSON.stringify(tasks));
}

function cargarDesdeLocalStorage() {
    const tareasGuardadas = localStorage.getItem("tasks");
    if (tareasGuardadas) {
        tasks = JSON.parse(tareasGuardadas);
    }
}

document.addEventListener("DOMContentLoaded", () => {
    cargarDesdeLocalStorage();
    renderTasks(); // Mostrar lo que haya guardado
});



4Ô∏è‚É£ Cada vez que cambies el array‚Ä¶
Agregar tarea: guardar despu√©s del push.

Eliminar tarea: guardar despu√©s de quitarla.

Marcar completada: guardar despu√©s de cambiar task.completed.

As√≠ aseguramos que siempre se actualice lo que hay en memoria.









-------------------------------
Explicaci√≥n de los cambios
1. let tasks = [] ahora se carga desde localStorage
Antes siempre empezaba vac√≠o, ahora en cargarDesdeLocalStorage() revisa si existe "tasks" en localStorage, y si existe, lo convierte de JSON a array.

2. guardarEnLocalStorage()
Despu√©s de cualquier cambio (agregar, eliminar, completar), convertimos tasks en texto JSON y lo guardamos.

3. Eventos que ahora guardan datos:
--En submit despu√©s de tasks.push(...)
--En eliminarTarea despu√©s de modificar el array
--En toggleCompletar despu√©s de cambiar el estado

4. Al cargar la p√°gina
Se llama cargarDesdeLocalStorage() y luego renderAll() para mostrar lo que haya.
*/